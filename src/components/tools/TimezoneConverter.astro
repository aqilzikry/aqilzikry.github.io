---
// TimezoneConverter component for displaying multiple timezone cards
---

<div class='timezone-converter'>
  <!-- Add Timezone Section -->
  <div class='mb-6 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg'>
    <h3 class='text-lg font-semibold mb-4 text-dark dark:text-light'>Add Timezone</h3>
    <div class='flex gap-3 items-end'>
      <div class='flex-1'>
        <label for='timezone-select' class='block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2'>
          Select Timezone
        </label>
        <select
          id='timezone-select'
          class='w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
        >
          <option value=''>Select a timezone</option>
        </select>
      </div>
      <button
        id='add-timezone-btn'
        class='px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500'
      >
        Add Timezone
      </button>
    </div>
  </div>

  <!-- Global Legend -->
  <div
    id='global-legend'
    class='mb-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-700 hidden'
  >
    <h4 class='text-sm font-medium text-blue-900 dark:text-blue-100 mb-3 text-center'>24-Hour Activity Color Guide</h4>
    <div class='flex justify-center gap-6 text-xs'>
      <div class='flex items-center gap-1'>
        <div class='w-3 h-3 rounded bg-indigo-900 dark:bg-indigo-950'></div>
        <span class='text-gray-600 dark:text-gray-400'>Night (10PM-6AM)</span>
      </div>
      <div class='flex items-center gap-1'>
        <div class='w-3 h-3 rounded bg-yellow-400 dark:bg-yellow-500'></div>
        <span class='text-gray-600 dark:text-gray-400'>Day (6AM-8AM, 6PM-10PM)</span>
      </div>
      <div class='flex items-center gap-1'>
        <div class='w-3 h-3 rounded bg-green-500 dark:bg-green-600'></div>
        <span class='text-gray-600 dark:text-gray-400'>Work (8AM-6PM)</span>
      </div>
      <div class='flex items-center gap-1'>
        <div class='w-1 h-3 rounded bg-white border border-gray-400'></div>
        <span class='text-gray-600 dark:text-gray-400'>Current Time</span>
      </div>
    </div>
  </div>

  <!-- Timezone Cards Container -->
  <div id='timezone-cards' class='space-y-4'>
    <!-- Timezone cards will be dynamically added here -->
  </div>

  <!-- Empty State -->
  <div id='empty-state' class='text-center py-8 text-gray-500 dark:text-gray-400'>
    <svg class='mx-auto w-12 h-12 mb-4 opacity-50' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
      <path
        stroke-linecap='round'
        stroke-linejoin='round'
        stroke-width='2'
        d='M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z'></path>
    </svg>
    <p class='text-lg font-medium mb-2'>No timezones added yet</p>
    <p class='text-sm'>Add a timezone above to get started</p>
  </div>
</div>

<script is:inline>
  document.addEventListener('astro:page-load', () => {
    const timezoneSelect = document.getElementById('timezone-select');
    const addBtn = document.getElementById('add-timezone-btn');
    const cardsContainer = document.getElementById('timezone-cards');
    const emptyState = document.getElementById('empty-state');
    const globalLegend = document.getElementById('global-legend');

    let timezones = [];
    let updateInterval;

    // Comprehensive timezone list with GMT offsets
    const timezoneList = [
      { tz: 'Pacific/Midway', name: 'Midway Island', offset: -11 },
      { tz: 'Pacific/Honolulu', name: 'Honolulu', offset: -10 },
      { tz: 'America/Anchorage', name: 'Anchorage', offset: -9 },
      { tz: 'America/Los_Angeles', name: 'Los Angeles', offset: -8 },
      { tz: 'America/Tijuana', name: 'Tijuana', offset: -8 },
      { tz: 'America/Denver', name: 'Denver', offset: -7 },
      { tz: 'America/Phoenix', name: 'Phoenix', offset: -7 },
      { tz: 'America/Chicago', name: 'Chicago', offset: -6 },
      { tz: 'America/Mexico_City', name: 'Mexico City', offset: -6 },
      { tz: 'America/New_York', name: 'New York', offset: -5 },
      { tz: 'America/Bogota', name: 'Bogotá', offset: -5 },
      { tz: 'America/Caracas', name: 'Caracas', offset: -4 },
      { tz: 'America/Santiago', name: 'Santiago', offset: -4 },
      { tz: 'America/Sao_Paulo', name: 'São Paulo', offset: -3 },
      { tz: 'America/Argentina/Buenos_Aires', name: 'Buenos Aires', offset: -3 },
      { tz: 'Atlantic/South_Georgia', name: 'South Georgia', offset: -2 },
      { tz: 'Atlantic/Azores', name: 'Azores', offset: -1 },
      { tz: 'UTC', name: 'UTC', offset: 0 },
      { tz: 'Europe/London', name: 'London', offset: 0 },
      { tz: 'Europe/Paris', name: 'Paris', offset: 1 },
      { tz: 'Europe/Berlin', name: 'Berlin', offset: 1 },
      { tz: 'Europe/Rome', name: 'Rome', offset: 1 },
      { tz: 'Europe/Athens', name: 'Athens', offset: 2 },
      { tz: 'Europe/Helsinki', name: 'Helsinki', offset: 2 },
      { tz: 'Africa/Cairo', name: 'Cairo', offset: 2 },
      { tz: 'Africa/Johannesburg', name: 'Johannesburg', offset: 2 },
      { tz: 'Europe/Moscow', name: 'Moscow', offset: 3 },
      { tz: 'Asia/Riyadh', name: 'Riyadh', offset: 3 },
      { tz: 'Asia/Tehran', name: 'Tehran', offset: 3.5 },
      { tz: 'Asia/Dubai', name: 'Dubai', offset: 4 },
      { tz: 'Asia/Kabul', name: 'Kabul', offset: 4.5 },
      { tz: 'Asia/Karachi', name: 'Karachi', offset: 5 },
      { tz: 'Asia/Kolkata', name: 'Mumbai', offset: 5.5 },
      { tz: 'Asia/Kathmandu', name: 'Kathmandu', offset: 5.75 },
      { tz: 'Asia/Dhaka', name: 'Dhaka', offset: 6 },
      { tz: 'Asia/Yangon', name: 'Yangon', offset: 6.5 },
      { tz: 'Asia/Bangkok', name: 'Bangkok', offset: 7 },
      { tz: 'Asia/Kuala_Lumpur', name: 'Kuala Lumpur', offset: 8 },
      { tz: 'Asia/Singapore', name: 'Singapore', offset: 8 },
      { tz: 'Asia/Shanghai', name: 'Shanghai', offset: 8 },
      { tz: 'Asia/Hong_Kong', name: 'Hong Kong', offset: 8 },
      { tz: 'Australia/Perth', name: 'Perth', offset: 8 },
      { tz: 'Asia/Tokyo', name: 'Tokyo', offset: 9 },
      { tz: 'Asia/Seoul', name: 'Seoul', offset: 9 },
      { tz: 'Australia/Adelaide', name: 'Adelaide', offset: 9.5 },
      { tz: 'Australia/Sydney', name: 'Sydney', offset: 10 },
      { tz: 'Australia/Brisbane', name: 'Brisbane', offset: 10 },
      { tz: 'Pacific/Guadalcanal', name: 'Guadalcanal', offset: 11 },
      { tz: 'Pacific/Auckland', name: 'Auckland', offset: 12 },
      { tz: 'Pacific/Fiji', name: 'Fiji', offset: 12 },
      { tz: 'Pacific/Tongatapu', name: 'Tongatapu', offset: 13 },
    ];

    // City name mapping (for backwards compatibility)
    const cityNames = {};
    timezoneList.forEach((tz) => {
      cityNames[tz.tz] = tz.name;
    });

    // Populate timezone selector
    function populateTimezoneSelector() {
      // Sort by GMT offset
      const sortedTimezones = [...timezoneList].sort((a, b) => a.offset - b.offset);

      // Clear existing options except the first one
      timezoneSelect.innerHTML = '<option value="">Choose a timezone...</option>';

      sortedTimezones.forEach((tz) => {
        const option = document.createElement('option');
        option.value = tz.tz;
        const offsetStr = tz.offset >= 0 ? `+${tz.offset}` : tz.offset.toString();
        option.textContent = `${tz.name} (GMT${offsetStr})`;
        timezoneSelect.appendChild(option);
      });
    }

    // Get user's current timezone
    function getCurrentTimezone() {
      try {
        return Intl.DateTimeFormat().resolvedOptions().timeZone;
      } catch (e) {
        return 'UTC'; // Fallback
      }
    }

    // Add current timezone automatically
    function addCurrentTimezone() {
      const currentTz = getCurrentTimezone();
      const currentTzInfo = timezoneList.find((tz) => tz.tz === currentTz);

      if (currentTzInfo) {
        timezones.push({
          id: Date.now(),
          timezone: currentTz,
          city: `${currentTzInfo.name} (Your Time)`,
        });
        updateTimezoneCards();
        toggleEmptyState();
      }
    }

    // Get hour color based on time of day
    function getHourColor(hour) {
      if (hour >= 22 || hour < 6) {
        // Night time (10 PM - 6 AM)
        return 'bg-indigo-900 dark:bg-indigo-950';
      } else if (hour >= 8 && hour < 18) {
        // Working hours (8 AM - 6 PM)
        return 'bg-green-500 dark:bg-green-600';
      } else {
        // Day time non-working hours (6 AM - 8 AM, 6 PM - 10 PM)
        return 'bg-yellow-400 dark:bg-yellow-500';
      }
    }

    // Create 24-hour activity tracker
    function create24HourTracker(timezoneData) {
      const now = new Date();

      // Calculate exact start and end times (12 hours ago and 12 hours later)
      const startTime = new Date(now.getTime() - 12 * 60 * 60 * 1000);
      const endTime = new Date(now.getTime() + 12 * 60 * 60 * 1000);

      const startTimeStr = startTime.toLocaleTimeString('en-US', {
        timeZone: timezoneData.timezone,
        hour12: true,
        hour: 'numeric',
        minute: '2-digit',
      });

      const endTimeStr = endTime.toLocaleTimeString('en-US', {
        timeZone: timezoneData.timezone,
        hour12: true,
        hour: 'numeric',
        minute: '2-digit',
      });

      const trackerContainer = document.createElement('div');
      trackerContainer.className = 'mt-4';

      // Create title with actual times
      const title = document.createElement('div');
      title.className = 'text-xs text-gray-600 dark:text-gray-400 mb-2 flex justify-between items-center';
      title.innerHTML = `
        <span class="font-mono">${startTimeStr}</span>
        <span class="font-mono">${endTimeStr}</span>
      `;

      // Create the tracker bar container with markers
      const trackerContainer_inner = document.createElement('div');
      trackerContainer_inner.className = 'relative';

      // Create the tracker bar
      const trackerBar = document.createElement('div');
      trackerBar.className = 'flex h-8 rounded-lg overflow-hidden border border-gray-300 dark:border-gray-600';

      // Create 24 hour segments based on exact time
      for (let i = 0; i < 24; i++) {
        const segment = document.createElement('div');

        // Calculate the hour for this segment based on exact start time
        const segmentTime = new Date(startTime.getTime() + i * 60 * 60 * 1000);
        const segmentHour = parseInt(
          segmentTime.toLocaleTimeString('en-US', {
            timeZone: timezoneData.timezone,
            hour12: false,
            hour: '2-digit',
          })
        );

        segment.className = `flex-1 transition-all duration-300 ${getHourColor(segmentHour)}`;

        // Add hour label on hover
        segment.title = segmentTime.toLocaleTimeString('en-US', {
          timeZone: timezoneData.timezone,
          hour12: false,
          hour: '2-digit',
          minute: '2-digit',
        });

        // Add current time indicator (should be at center - 12th segment)
        if (i === 12) {
          segment.style.position = 'relative';
          segment.innerHTML =
            '<div class="absolute inset-0 flex items-center justify-center"><div class="w-1 h-6 bg-white rounded-full shadow-lg"></div></div>';
        }

        trackerBar.appendChild(segment);
      }

      trackerContainer_inner.appendChild(trackerBar);

      trackerContainer.appendChild(title);
      trackerContainer.appendChild(trackerContainer_inner);

      return trackerContainer;
    }

    // Add timezone function
    function addTimezone() {
      const selectedTimezone = timezoneSelect.value;

      if (!selectedTimezone) {
        alert('Please select a timezone');
        return;
      }

      // Check if timezone already exists
      if (timezones.find((tz) => tz.timezone === selectedTimezone)) {
        alert('This timezone is already added');
        return;
      }

      // Add to timezones array
      timezones.push({
        id: Date.now(),
        timezone: selectedTimezone,
        city: cityNames[selectedTimezone] || selectedTimezone,
      });

      // Clear selection
      timezoneSelect.value = '';

      // Update display
      updateTimezoneCards();
      toggleEmptyState();
    }

    // Remove timezone function
    function removeTimezone(id) {
      timezones = timezones.filter((tz) => tz.id !== id);
      updateTimezoneCards();
      toggleEmptyState();
    }

    // Create timezone card with proper styling
    function createTimezoneCard(timezoneData) {
      const now = new Date();

      // Get time in the specific timezone
      const timeOptions = {
        timeZone: timezoneData.timezone,
        hour12: true,
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      };

      const dateOptions = {
        timeZone: timezoneData.timezone,
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
      };

      const time = now.toLocaleTimeString('en-US', timeOptions);
      const date = now.toLocaleDateString('en-US', dateOptions);

      // Get timezone abbreviation and offset
      const formatter = new Intl.DateTimeFormat('en-US', {
        timeZone: timezoneData.timezone,
        timeZoneName: 'short',
      });

      const parts = formatter.formatToParts(now);
      const timeZoneName = parts.find((part) => part.type === 'timeZoneName')?.value || '';

      // Calculate UTC offset
      const utcDate = new Date(now.toLocaleString('en-US', { timeZone: 'UTC' }));
      const tzDate = new Date(now.toLocaleString('en-US', { timeZone: timezoneData.timezone }));
      const offsetMs = tzDate.getTime() - utcDate.getTime();
      const offsetHours = offsetMs / (1000 * 60 * 60);
      const offsetStr = `UTC${offsetHours >= 0 ? '+' : ''}${offsetHours}`;

      // Create the card element
      const cardDiv = document.createElement('div');
      cardDiv.setAttribute('data-id', timezoneData.id);
      cardDiv.className =
        'w-full bg-white dark:bg-gray-800 border-2 border-gray-200 dark:border-gray-600 rounded-xl p-6 shadow-lg hover:shadow-xl hover:border-blue-300 dark:hover:border-blue-500 transition-all duration-300';

      cardDiv.innerHTML = `
        <div class="flex justify-between items-start mb-4">
          <div class="flex-1">
            <h4 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-2">${timezoneData.city}</h4>
            <span class="inline-block text-xs px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded-full font-medium">${timeZoneName}</span>
          </div>
          <button class="text-gray-400 hover:text-red-500 hover:bg-red-50 dark:hover:bg-red-900 p-2 rounded-lg transition-all duration-200 cursor-pointer" onclick="removeTimezone(${timezoneData.id})" title="Remove timezone">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        
        <div class="flex items-center justify-between mb-4">
          <div class="flex-1">
            <div class="text-3xl font-bold text-gray-900 dark:text-gray-100 mb-1">${time}</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">${date}</div>
          </div>
          <div class="text-right text-sm text-gray-500 dark:text-gray-500 font-mono bg-gray-100 dark:bg-gray-700 px-3 py-1 rounded-lg">${offsetStr}</div>
        </div>
      `;

      // Add the 24-hour tracker
      const tracker = create24HourTracker(timezoneData);
      cardDiv.appendChild(tracker);

      return cardDiv;
    }

    // Update all timezone cards
    function updateTimezoneCards() {
      // Clear existing cards
      cardsContainer.innerHTML = '';

      // Add each timezone card
      timezones.forEach((tz) => {
        const cardElement = createTimezoneCard(tz);
        cardsContainer.appendChild(cardElement);
      });
    }

    // Toggle empty state visibility
    function toggleEmptyState() {
      if (timezones.length === 0) {
        emptyState.style.display = 'block';
        cardsContainer.style.display = 'none';
        globalLegend.classList.add('hidden');
      } else {
        emptyState.style.display = 'none';
        cardsContainer.style.display = 'block';
        globalLegend.classList.remove('hidden');
      }
    }

    // Make functions global so they can be called from HTML
    window.removeTimezone = removeTimezone;

    // Event listeners
    addBtn.addEventListener('click', addTimezone);

    timezoneSelect.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        addTimezone();
      }
    });

    // Update times every second
    function startUpdating() {
      updateInterval = setInterval(() => {
        if (timezones.length > 0) {
          updateTimezoneCards();
        }
      }, 1000);
    }

    // Stop updating when component is not visible
    function stopUpdating() {
      if (updateInterval) {
        clearInterval(updateInterval);
      }
    }

    // Initialize
    populateTimezoneSelector();
    addCurrentTimezone();
    toggleEmptyState();
    startUpdating();

    // Cleanup on page unload
    window.addEventListener('beforeunload', stopUpdating);
  });
</script>
